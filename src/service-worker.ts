/// <reference lib="webworker" />

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

declare let self: ServiceWorkerGlobalScope;

// Precache all assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
registerRoute(
  /^https:\/\/fonts\.googleapis\.com/,
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache the underlying font files with a cache-first strategy for 1 year
registerRoute(
  /^https:\/\/fonts\.gstatic\.com/,
  new CacheFirst({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        maxEntries: 30,
      }),
    ],
  })
);

// Cache images
registerRoute(
  /\.(?:png|gif|jpg|jpeg|webp|svg)$/,
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache JavaScript and CSS
registerRoute(
  /\.(?:js|css)$/,
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Add handling for custom schemes
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  
  // Allow UPI schemes to pass through without network check
  if (url.protocol === 'upi:' || 
      url.protocol === 'phonepe:' || 
      url.protocol === 'tez:' || 
      url.protocol === 'paytmmp:' || 
      url.protocol === 'credpay:' || 
      url.protocol === 'intent:') {
    return;
  }

  // Existing navigate handling
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/offline.html');
      })
    );
  }
});

// Background sync for payments
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-payments') {
    event.waitUntil(syncPayments());
  }
});

async function syncPayments() {
  try {
    const pendingPayments = await getPendingPayments();
    
    // Process each payment
    for (const payment of pendingPayments) {
      if (payment.intendedUrl) {
        // Notify client to handle the UPI app opening
        const clients = await self.clients.matchAll();
        clients.forEach(client => {
          client.postMessage({
            type: 'PROCESS_PAYMENT',
            payment
          });
        });
      }
    }
  } catch (error) {
    console.error('Error syncing payments:', error);
  }
}

async function getPendingPayments() {
  // Implement getting pending payments from IndexedDB
  return [];
}

// Handle push notifications
self.addEventListener('push', (event) => {
  const options = {
    body: event.data?.text() ?? 'New payment notification',
    icon: '/pwa-192x192.png',
    badge: '/pwa-192x192.png',
    vibrate: [100, 50, 100],
  };

  event.waitUntil(
    self.registration.showNotification('UPI2QR', options)
  );
});

// Add handler for online events
self.addEventListener('online', (event) => {
  event.waitUntil(
    (async () => {
      const clients = await self.clients.matchAll();
      clients.forEach(client => {
        client.postMessage({
          type: 'ONLINE_STATUS',
          online: true
        });
      });
    })()
  );
});

// Update cache strategy to include app icons
registerRoute(
  /\/app-icons\/.+\.svg$/,
  new CacheFirst({
    cacheName: 'app-icons',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
); 