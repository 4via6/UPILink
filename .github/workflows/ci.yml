name: Docker Build and Push Image
on:
  push:
    branches: [main]
env:
  IMAGE_NAME: upi-link
  MANIFEST_REPO: git@github.com:Harsh-2002/argocd.git
  MANIFEST_PATH: k3s/arson/UPI-Link/deployment.yaml
  TZ: "Asia/Kolkata" 

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, x64]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set App Info
        id: app_info
        run: |
          {
            echo "APP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"
            echo "REPO_OWNER=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')"
            echo "WORKFLOW_START=$(date +%s)"
          } >> $GITHUB_ENV

      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: Configure Git
        id: git_config
        run: |
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"

      - name: Generate IST timestamp tag
        id: timestamp
        run: |
          echo "tag=$(TZ='Asia/Kolkata' date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "Using tag: $(TZ='Asia/Kolkata' date +'%Y%m%d-%H%M%S')"

      - name: Log into Private Registry
        id: docker_login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}
          username: ${{ secrets.PRIVATE_DOCKERHUB_USERNAME }}
          password: ${{ secrets.PRIVATE_DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.timestamp.outputs.tag }}
            ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest

      - name: Clone and Update Manifest
        id: update_manifest
        run: |
          rm -rf argocd || true
          git clone $MANIFEST_REPO argocd
          cd argocd
          sed -i "s|image: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/upi-link:.*|image: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/upi-link:${{ steps.timestamp.outputs.tag }}|" $MANIFEST_PATH
          git add $MANIFEST_PATH
          git commit -m "Update upi-link to IST timestamp: ${{ steps.timestamp.outputs.tag }}" || echo "No changes to commit"
          git push || echo "No changes to push"
          
      - name: Install Argo CD CLI if not present
        run: |
          if ! command -v argocd &> /dev/null; then
            echo "Argo CD CLI not found, installing..."
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd-linux-amd64
            sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          else
            echo "Argo CD CLI is already installed"
          fi
          argocd version --client
      
      - name: Login to ArgoCD
        id: argocd_login
        run: |
          argocd login argocd.srvr.site --grpc-web \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }}
          
      - name: Get Last Commit Message
        id: commit
        run: |
          echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: ArgoCD Sync with Strategy
        id: sync
        run: |
          echo "Starting sync for application..."
          argocd app sync k3s --force --prune --retry-limit 3
          argocd app wait k3s --timeout 600
