name: Docker Build and Push Image
on:
  push:
    branches: [main]
env:
  IMAGE_NAME: upi-link
  MANIFEST_REPO: git@github.com:Harsh-2002/argocd.git
  MANIFEST_PATH: k3s/arson/UPI-Link/deployment.yaml
  GIT_USER_EMAIL: "av7312002@gmail.com"
  GIT_USER_NAME: "Harsh-2002"
  TZ: "Asia/Kolkata" 

jobs:
  build-and-push:
    runs-on: [self-hosted, linux, x64]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set App Info
        run: |
          echo "APP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
          echo "REPO_OWNER=$(echo '${{ github.repository }}' | awk -F '/' '{print $1}')" >> $GITHUB_ENV
          START_TIME=$(date +%s)
          echo "start_time=$START_TIME" >> $GITHUB_ENV

      - name: Notify Deployment Start
        run: |
          curl \
            -u ${{ secrets.NTFY_CRED }} \
            -H "Title: üöÄ ${{ env.APP_NAME }} Deployment Started" \
            -H "Priority: default" \
            -H "Tags: rocket,hourglass" \
            -H "Content-Type: text/plain" \
            -d $'üì¶ Repository: ${{ github.repository }}\nüë§ Triggered By: ${{ github.actor }}\nüìù Commit Message: ${{ github.event.head_commit.message }}\nüîÄ Branch: ${{ github.ref_name }}\n‚è∞ Start Time: $(date)' \
            ${{ secrets.NTFY_URL }}

      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4

      - name: Configure Git
        id: git_config
        run: |
          git config --global user.email "${{ env.GIT_USER_EMAIL }}"
          git config --global user.name "${{ env.GIT_USER_NAME }}"

      - name: Generate IST timestamp tag
        id: timestamp
        run: |
          echo "tag=$(TZ='Asia/Kolkata' date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "Using tag: $(TZ='Asia/Kolkata' date +'%Y%m%d-%H%M%S')"

      - name: Log into Private Registry
        id: docker_login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}
          username: ${{ secrets.PRIVATE_DOCKERHUB_USERNAME }}
          password: ${{ secrets.PRIVATE_DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/upi-link:${{ steps.timestamp.outputs.tag }}
            ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/upi-link:latest

      - name: Clone and Update Manifest
        id: update_manifest
        run: |
          # Ensure clean state
          rm -rf argocd || true
          
          # Clone with SSH
          git clone $MANIFEST_REPO argocd
          
          # Update manifest with new tag
          cd argocd
          sed -i "s|image: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/upi-link:.*|image: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/upi-link:${{ steps.timestamp.outputs.tag }}|" $MANIFEST_PATH
          
          # Commit and push changes
          git add $MANIFEST_PATH
          git commit -m "Update upi-link to IST timestamp: ${{ steps.timestamp.outputs.tag }}" || echo "No changes to commit"
          git push || echo "No changes to push"
          
      - name: Login to ArgoCD
        id: argocd_login
        run: |
          argocd login argocd.srvr.site --grpc-web \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }}
          
      - name: Get Last Commit Message
        id: commit
        run: |
          echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: ArgoCD Sync with Strategy
        id: sync
        run: |
          echo "Starting sync for application..."
          argocd app sync k3s --force --prune --retry-limit 3
          argocd app wait k3s --timeout 600

      - name: Notify Success
        if: success()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - ${{ env.start_time }}))
          MINS=$((DURATION / 60))
          SECS=$((DURATION % 60))
          
          curl \
            -u ${{ secrets.NTFY_CRED }} \
            -H "Title: ‚úÖ ${{ env.APP_NAME }} Deployment Successful" \
            -H "Priority: default" \
            -H "Tags: white_check_mark,rocket" \
            -H "Content-Type: text/plain" \
            -d $'üì¶ Repository: ${{ github.repository }}\nüîÑ Image: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.timestamp.outputs.tag }}\nüë§ Deployed By: ${{ github.actor }}\nüîÄ Branch: ${{ github.ref_name }}\nüìù Last Commit: ${{ steps.commit.outputs.message }}\n‚ö° Duration: '"${MINS}m ${SECS}s"$'\n‚è∞ Time: $(date)' \
            ${{ secrets.NTFY_URL }}

      - name: Notify Failure
        if: failure()
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - ${{ env.start_time }}))
          MINS=$((DURATION / 60))
          SECS=$((DURATION % 60))
          
          # Determine which step failed
          FAILED_STEP="${{ steps.checkout.conclusion == 'failure' && 'Checkout' || 
            steps.git_config.conclusion == 'failure' && 'Git Configuration' ||
            steps.docker_login.conclusion == 'failure' && 'Docker Login' ||
            steps.docker_build.conclusion == 'failure' && 'Docker Build' ||
            steps.update_manifest.conclusion == 'failure' && 'Manifest Update' ||
            steps.argocd_login.conclusion == 'failure' && 'ArgoCD Login' ||
            steps.sync.conclusion == 'failure' && 'ArgoCD Sync' ||
            'Unknown Step' }}"
          
          curl \
            -u ${{ secrets.NTFY_CRED }} \
            -H "Title: ‚ùå ${{ env.APP_NAME }} Deployment Failed" \
            -H "Priority: high" \
            -H "Tags: x,warning" \
            -H "Content-Type: text/plain" \
            -d $'üì¶ Repository: ${{ github.repository }}\nüîÑ Image: ${{ secrets.PRIVATE_DOCKER_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.timestamp.outputs.tag }}\nüë§ Attempted By: ${{ github.actor }}\nüîÄ Branch: ${{ github.ref_name }}\n‚ùå Failed Step: '"$FAILED_STEP"$'\n‚ö° Failed After: '"${MINS}m ${SECS}s"$'\n‚è∞ Time: $(date)\n\n‚ùó Check GitHub Actions for detailed logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
            ${{ secrets.NTFY_URL }}